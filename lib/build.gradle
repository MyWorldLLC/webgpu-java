import java.nio.file.Paths

plugins {
    id 'java-library'
    id 'maven-publish'
}

def wgpuVersion = project.findProperty('wgpuVersion')

configurations {
    headers
}

dependencies {
    headers project(path: ":natives", configuration: 'headers')
}

def jextractHome = project.hasProperty('jextract.home')
        ? project.property('jextract.home')
        : null

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(21))
    }
}

jar {
    archiveBaseName = 'webgpu'
}

sourceSets {
    main {
        java {
            srcDirs += 'build/bindings'
        }
    }
}

tasks.compileJava {
    options.compilerArgs.add("--enable-preview")
}

task invokeJextract(type: Exec){
    doFirst {
        file('build/bindings').mkdirs()
    }
    if(jextractHome){
        executable Paths.get(jextractHome as String, 'bin', 'jextract')
    }else{
        executable 'jextract'
    }
    args (
        configurations.headers.files[0],
        '-t', 'com.myworldvw.webgpu',
        '--output', 'build/bindings'
    )
}

task cleanupExtras(type: Delete, dependsOn: invokeJextract){
    // Delete extra files that jextract generates from included system headers that we don't
    // actually need to have. These may be different on different platforms - max_align_t.java
    // & __fsid_t.java are generated when jextract is run on Linux. WebGPU doesn't define
    // any *_t types, so we can delete these by regex.
    delete fileTree('build/bindings/com/myworldvw/webgpu/').matching {
        include '*_t.java'
    }

}

task jextract(dependsOn: [invokeJextract, cleanupExtras])

tasks.findByName('compileJava').dependsOn jextract

task bindings(type: Copy, dependsOn: [jextract, jar]){
    from jar
    into 'build'
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'com.myworldvw'
            artifactId = 'webgpu-java'
            version = "$wgpuVersion"

            artifact file("build/webgpu.jar")
        }
    }
    repositories {
        mavenLocal()
        maven {
            name = "GHPackages"
            url = uri("https://maven.pkg.github.com/MyWorldLLC/webgpu-java")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_USER")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }
}